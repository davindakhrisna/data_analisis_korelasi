# -*- coding: utf-8 -*-
"""Korelasi Data Mobil.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rGxZfRouv7PdXutOEqtlC5eqXbmLli-w

### Import Libraries

Yang pertama ini mengimport libraries kedalam notebook ada pandas, numpy, seaborn, dan matplotlib.

Lalu dilakukan konfigurasi size dari figure plot dari matplotlib dengan size (12,8)
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries

import pandas as pd
import numpy as np
import seaborn as sns

import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib
plt.style.use('ggplot')
from matplotlib.pyplot import figure

# %matplotlib inline
matplotlib.rcParams['figure.figsize'] = (12,8) #Konfigurasi size figur di MATPLOTPLIB

pd.options.mode.chained_assignment = None

### PANDAS ###

# Membaca data menggunakan PANDAS
df = pd.read_csv(r'/content/Automobile.csv')

# Menampilkan data
df

"""### Mencari Kolom Kosong

Di bagian ini kita akan mencari persentase dari kolom kosong dengan menggunakan numpy. Numpy ini akan menampilkan data kosong secara persentase dari kolom

Lalu akan disajikan dalam format {kolom} - {data_hilang}%
"""

### NUMPY ###

# Mencari kolom kosong

for col in df.columns:
  data_hilang = np.mean(df[col].isnull()) # Mencari kolom yang kosong
  print('{} - {}%'.format(col, data_hilang)) # Penyajian informasi dengan format "{kolom} - {data_hilang}"

"""#### Menampilkan Tipe Data Kolom

Dilakukan menggunakan Pandas
"""

### PANDAS ###

# Menampilkan tipe data tiap kolom
df.dtypes

"""### Mengubah Tipe Data

Disini menggunakan Pandas untuk mengganti kolom "mpg" dan "displacement" yang tadinya "float"(ada .0 dibelakang angka) menjadi "int"(menghapus .0 dibelakang angka kolom)
"""

### PANDAS ###

# Mengganti "mpg" dan "displacement" dari "float64" menjadi "int64"
df['mpg'] = df['mpg'].astype('int64')
df['displacement'] = df['displacement'].astype('int64')

df

# Seperti yang dilihat yang tadinya ada .0 dibelakang
# angka sekarang menghilang karena penggunaan tipe data int64

"""### Membuat Kolom Baru dari Kolom Lain (Tidak Digunakan Kali Ini!)

Seperti yang diketahui, Kolom "released" ini bertipe data object sehingga kita perlu mengubah tipe datanya menjadi string lalu mengambil 4 karakter awal dari "released" untuk menjadi isi dari Kolom "yearcorrect"
"""

### PANDAS ###

### DISCLAMER! TIDAK DIGUNAKAN PADA KODINGAN KALI INI ###

# Membuat Kolom baru dengan menggunakan isi Kolom lain

# Note : released=object #

# Jadi kode dibawah ini adalah untuk membuat Kolom "yearcorrect" yang berisikan Kolom "released"
# Akan tetapi karena released=object maka dibawah ini akan diubah menjadi string ".astype(str)" dan mengambil 4 huruf awal ".str[0:4]"
df['yearcorrect'] = df['released'].astype(str).str[0:4]

"""### Menyortir Data

Menggunakan Pandas, df.sort_values berguna untuk menyortir isi kolom dari karakter terawal(ascending) atau terbawah(descending). Dibawah ini kita memakai by=['name'] untuk mengerucutkan penyortiran sehingga hanya Kolom 'name' saja yang terpengaruh
"""

### PANDAS ###

# Menyortir data dari kolom 'name' dengan menyajikanya secara ascending/descending

# df = df.sort_values(by=['name'], inplace=False, ascending=True) ## ASCENDING (A - Z)
# df = df.sort_values(by=['name'], inplace=False, ascending=False) ## DESCENDING (Z - A)

df = df.sort_values(by=['name'], inplace=False, ascending=True)

"""### Display Secara Maksimal

Kode pandas dibawah ini berfungsi untuk menampilkan data secara Kolom maksimal

"""

### PANDAS ###

pd.set_option('display.max_rows', None)

"""### Menghapus Data yang Terduplikasi

Berfungsi untuk menghapus data yang terduplikasi didalam data. Umumnya pemakaian kode ini adalah df.drop_duplicates(). Tapi karena kita hanya ingin menghapus data terduplikasi dari nama mobil maka kita tuliskan df['name'].drop_duplicates() sehingga Kolom lain tidak terpengaruh

df.dropna(subset=['name'], inplace=True) berfungsi untuk menghapus Kolom dari kolom name yang kosong (NaN)
"""

### PANDAS ###

# Menghapus data yang terduplikasi

df['name'] = df['name'].drop_duplicates()
df.sort_values(by=['name'], inplace=False, ascending=True)

# Menghapus kolom-kolom yang kosong (NaN)
df.dropna(subset=['name'], inplace=True)

df
# Kode diatas akan menghapus data yang terduplikasi dalam Kolom "nama" dan menyajikanya dengan bentuk ascending=True

"""### Plot Scatter

Menggunakan MATPLOTLIB. Disini plot tidak dapat menggunakan object, object. Tabel Scatter yang kita gunakan ini berupa 'origin(object)' dan 'weight(float)'


"""

### MATPLOTLIB ###

## NOTES : ERROR JIKA MEMASUKAN 2 OBJECT

# Kode dibawah ini akan menunjukan tampilan "scatter" dengan garis y=weight dan x=origin
plt.scatter(x=df['horsepower'], y=df['weight'])

# Penamaan tampilan
plt.title('Berat mobil dari setiap region')
plt.ylabel('Berat Mobil')

plt.show()

"""### Menampilkan 5 Data Pertama

Menggunakan Pandas
"""

### PANDAS ###

# Menampilkan 5 data pertama
df.head()

"""### Tampilan Plot menggunakan Seaborn

Kita hanya memasukan weight sebagai x, dan horsepower sebagai y, dan jangan lupa masukan df sebagai data yang akan ditampilkan

Seperti yang bisa dilihat semakin naik beratnya semakin besar juga tenaga kudanya
"""

### SEABORN ###

# Plot Seaborn
# Menggunakan regplot(tabel plot seaborn) dan mengkonfigur x=weight, y=horsepower, dan data=df
sns.regplot(x='weight', y='horsepower', data=df, line_kws={"color":"blue"}, scatter_kws={"color":"red"})
# Selain itu kita mengubah warna line menjadi biru

"""### Korelasi Data

Cara mengetahui ada atau tidaknya hubungan linear antara variabel.

Dalam korelasi data ini terdapat 3 metode untuk mencari korelasi yaitu pearson(default), kendall, spearman dan mereka bertiga bekerja secara berbeda


Seperti yang terlihat kita mempunyai korelasi tinggi antara displacement dan cylinders
"""

### PANDAS ###

# Korelasi hanya bekerja dalam Kolom numerik

df.corr(method='pearson') #method = pearson, kendall, spearman

#Korelasi tinggi antara cylinders dan horsepower

"""### Heatmap Seaborn Korelasi

Disini menggunakan heatmap untuk menampilkan tinggi rendahnya korelasi pada data yang dipakai

Seperti yang dilihat bahwa semakin menghitam korelasinya berarti semakin rendah dan sebaliknya
"""

### SEABORN ###

# Set string korelasi
correlation_matrix = df.corr(method='pearson') # Method = pearson, kendall, spearman

# Kode heatmap Seaborn pada korelasi
sns.heatmap(correlation_matrix, annot=True)

# Penamaan tampilan
plt.title('Matrix Korelasi Heatmap')
plt.ylabel('Informasi Mobil')
plt.xlabel('Informasi Mobil')

plt.show

"""### Numerize Kolom

Mengubah kolom menjadi numeric. Dalam kasus ini kita mengubah kolom yang ber tipe data object pada dataset ini ke numeric dan mengkategorikanya sehingga tidak ada angka yang bertabrakan
"""

### PANDAS ###

df_numerized = df

# Untuk setiap kolom di dataframe
for col_name in df_numerized.columns:
  # Jika kolomnya adalah object
  if(df_numerized[col_name].dtype == 'object'):
    # Maka ubah tipe data kolom tersebut menjadi category
    df_numerized[col_name] = df_numerized[col_name].astype('category')
    # Menggunakan cat.codes kolom tersebut akan diisi oleh angka, tapi karena kita menambahkan tipe data category maka tidak ada yang bertabarakan
    df_numerized[col_name] = df_numerized[col_name].cat.codes

df_numerized

"""### Heatmap Matrix Korelasi pada kolom yang telah di Numerasi

Karena heatmap tidak membaca selain numerik. Kolom
"""

### SEABORN ###

# Set string korelasi
correlation_matrix = df_numerized.corr(method='pearson') # Method = pearson, kendall, spearman

# Kode heatmap Seaborn pada korelasi
sns.heatmap(correlation_matrix, annot=True)

# Penamaan tampilan
plt.title('Matrix Korelasi Heatmap')
plt.ylabel('Informasi Mobil')
plt.xlabel('Informasi Mobil')

plt.show

"""### Patokan perbedaan dataframe dengan heatmap korelasi"""

### PANDAS ###

# Patokan perbedaan untuk heatmap dan dataframe korelasi

df_numerized.corr()

"""### Tampilan dataframe korelasi secara beda-beda

ada yang terperinci (terdapat juga yang hanya menampilkan korelasi diatas 0.5)

dan satunya.

Pada kode ini akan terlihat bahwa korelasi tertinggi dipegang oleh

displacement - cylinders
"""

### PANDAS ###

# Penyortiran kebawah dari dataframe korelasi yang terperinci
sorted_pairs = corr_pairs.sort_values()

# Penyortiran tinggi korelasi
high_corr = sorted_pairs[(sorted_pairs) > 0.5]

high_corr
# sorted_pairs

### PANDAS ###

correlation_mat = df_numerized.corr()

corr_pairs = correlation_mat.unstack()

corr_pairs

